(define (even? x)
	(= (remainder x 2) 0)
)

(define (expo b n)
	(define (exp-iter b a n)
		(cond ((= n 0) a)
		      ((even? n) (exp-iter (square b) a (/ n 2)))
		      (else (exp-iter b (* a b) (- n 1)))
		)
	)
	(exp-iter b 1 n)
)

(define (accumulate op initial sequence)
    (cond ((null? sequence) initial)
          (else (op (car sequence) (accumulate op initial (cdr sequence))))
    )
)

(define (=number? exp number)
  	(and (number? exp) (= exp number))
)

(define (variable? exp)
  	(symbol? exp)
)

(define (same-variable? x y)
  	(and (variable? x) (variable? y) (eq? x y))
)

(define (make-sum num1 num2 . nums)
    (let ((list-sum (append (list num1 num2) nums)))
        (let (
                (sum-num (accumulate + 0 (filter (lambda (item) (number? item)) list-sum)))
                (symbols (filter (lambda (item) (not (number? item))) list-sum))
             )
            (cond ((null? symbols) sum-num)
                  ((= sum-num 0) (if (= (length symbols) 1) (car symbols) (append '(+) symbols)))
                  (else (append '(+) symbols (list sum-num)))
            )
        )
    )
)

(define (make-product num1 num2 . nums)
  	(let ((list-prod (append (list num1 num2) nums)))
        (let (
                (prod-num (accumulate * 1 (filter (lambda (item) (number? item)) list-prod)))
                (symbols (filter (lambda (item) (not (number? item))) list-prod))
             )
            (cond ((null? symbols) prod-num)
                  ((= prod-num 1) (if (= (length symbols) 1) (car symbols) (append '(*) symbols)))
                  ((= prod-num 0) 0)
                  (else (append '(*) symbols (list prod-num)))
            )
        )
    )
)

(define (sum? exp)
  	(and (pair? exp) (eq? '+ (car exp)))
)

(define (addend exp)
  	(cadr exp)
)

(define (augend exp)
    (if (= (length exp) 3)
        (caddr exp)
        (append '(+) (cddr exp))
    )
)

(define (product? exp)
  	(and (pair? exp) (eq? '* (car exp)))
)

(define (multiplier exp)
  	(cadr exp)
)

(define (multiplicand exp)
    (if (= (length exp) 3)
        (caddr exp)
        (append '(*) (cddr exp))
    )
)

(define (exponentiation? exp)
  	(and (pair? exp) (eq? '** (car exp)))
)

(define (base exp)
  	(cadr exp)
)

(define (exponent exp)
  	(caddr exp)
)

(define (make-exponentiation base exponent)
  	(cond ((=number? exponent 1) base)
  	      ((=number? exponent 0) 1)
  	      ((and (number? base) (number? exponent)) (expo base exponent))
  	      (else (list '** base exponent))
  	)
)

;----------------------------------------------------------------

(define (deriv exp var)
  	(cond ((number? exp) 0)
  	      ((variable? exp) (if (same-variable? exp var) 1 0))
  	      ((sum? exp) (make-sum (deriv (addend exp) var)
  	      						(deriv (augend exp) var)
  	      			  )
  	      )
  	      ((product? exp) 
  	      	(make-sum
  	      		(make-product
  	      			(multiplier exp)
  	      			(deriv (multiplicand exp) var)
  	      		)
  	      		(make-product
  	      			(multiplicand exp)
  	      			(deriv (multiplier exp) var)
  	      		)
  	      	)
  	      )
  	      ((exponentiation? exp)
  	      	(make-product
  	      		(make-product
  	      			(exponent exp)
  	      			(make-exponentiation (base exp) (make-sum (exponent exp) -1))
  	      		)
  	      		(deriv (base exp) var)
  	      	)
  	      )
  	      (else (error "Unknown expression type: DERIV" exp))
  	)
)