(define (element-of-set? x set)
  	(cond ((null? set) false)
  	      ((equal? x (car set)) true)
  	      (else (element-of-set? x (cdr set)))
  	)
)

(define (adjoin-set x set)
  	(if (element-of-set? x set)
  		set
  		(cons x set)
  	)
)

(define (intersection set1 set2)
  	(cond ((or (null? set1) (null? set2)) '())
  	      ((element-of-set? (car set1) set2) (cons (car set1) (intersection (cdr set1) set2)))
  	      (else (intersection (cdr set1) set2))
  	)
)

(define (union-set set1 set2)
	(define (iter set1 set2)
		(cond ((null? set1) set2)
		      (else (iter (cdr set1) (adjoin-set (car set1) set2)))
		)
	)
	(iter (reverse set1) set2)
)