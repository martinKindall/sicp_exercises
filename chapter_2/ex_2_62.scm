(define (union-set set1 set2)
  	(define (iter set1 set2 res)
  	  	(cond ((null? set1) (append res set2))
  	  	      ((null? set2) (append res set1))
  	  	      ((= (car set1) (car set2)) (iter (cdr set1) (cdr set2) (append res (list (car set1)))))
  	  	      ((< (car set1) (car set2)) (iter (cdr set1) set2 (append res (list (car set1)))))
  	  	      ((> (car set1) (car set2)) (iter set1 (cdr set2) (append res (list (car set2)))))
  	  	)
  	)
  	(iter set1 set2 '())
)