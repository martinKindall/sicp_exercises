(define (filter predicate? sequence)
    (define (iter result rest)
        (cond ((null? rest) result)
              ((predicate? (car rest)) (iter (append result (list (car rest))) (cdr rest)))
              (else (iter result (cdr rest)))
        )
    )
    (iter () sequence)
)

(define (remove item sequence)
  	(filter (lambda (x) (not (= x item))) sequence)
)

(define (sym-diff seq1 seq2)
	(let ((reversed_seq1 (reverse seq1)))
		(define (iter current1 current2)
		  	(cond ((null? current1) current2)
		  	      ((not (pair? current1)) 
		  	      	(let ((length1 (length current2))
		  	      			(seq22 (remove current1 current2))
		  	      		 )
		  	      		(if (= length1 (length seq22))
		  	      		    (cons current1 current2)
		  	      		    seq22
		  	      		)
		  	      	)
		  	      )
		  	      (else 
		  	      	(let ((sym-diff-aux (iter (car current1) current2)))
		  	      		(iter (cdr current1) sym-diff-aux)
		  	      	)
		  	      )
		  	)
		)
		(iter reversed_seq1 seq2)
	)
)