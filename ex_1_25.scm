(define (square x) (* x x))

(define (fast-expt b n) 
   (define (iter a b n) 
     (cond ((= n 0) a) 
           ((even? n) (iter a (square b) (/ n 2))) 
           (else (iter (* a b) b (- n 1))))) 
   (iter 1 b n)) 

(define (expmod base exp m)
	(remainder (fast-expt base exp) m)
)

(define (fermat-test n)
	(define (try-it a)
		(= (expmod a n n) a)
	)
	(try-it (+ 1 (random (- n 1))))
)

(define (fast-prime? n times)
	(cond ((= times 0) true)
	      ((fermat-test n) (fast-prime? n (- times 1)))
	      (else false)
	)
)

(define (report-prime elapsed-time)
		(display "***")
		(display elapsed-time)
)

(define (start-prime-test n start-time)
		(if (fast-prime? n 5) 
			(report-prime (- (runtime) start-time))
		)
)

(define (timed-prime-test n)
		(newline)
		(display n)
		(start-prime-test n (runtime))
)

(define (search-for-primes range amount)
		(if (> amount 0)
			(cond ((even? range) (timed-prime-test (+ range 1)) (search-for-primes (+ range 3) (- amount 1)))
			      (else (timed-prime-test range) (search-for-primes (+ range 2) (- amount 1)))
			)
		)
)